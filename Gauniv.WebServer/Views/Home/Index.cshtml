@model IndexViewModel
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@inject Microsoft.AspNetCore.Identity.UserManager<Gauniv.WebServer.Data.User> userManager
@inject Gauniv.WebServer.Data.ApplicationDbContext _context

@{
    ViewData["Title"] = "Games List";
    // Détermine si l'utilisateur est connecté et s'il est admin
    bool isAuthenticated = User.Identity?.IsAuthenticated == true;
    bool isAdmin = User.IsInRole("Admin");
    var ownedGameIds = Model.OwnedGameIds ?? new List<int>();
}

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<link href="~/css/game-display.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />

<h1>Games List</h1>


    <div class="header-grid">
        @if (isAdmin)
        { 
            <p class="create-button">
                <a asp-controller="Game" asp-action="CreateGame" class="btn btn-primary style-button">Create New Game</a>
            </p>
            <p class="create-button">
                <a asp-controller="Category" asp-action="CreateCategory" class="btn btn-primary style-button">Create New Category</a>
            </p>
        }
        <p class="create-button">
            <a asp-controller="Category" asp-action="ListCategory" class="btn btn-primary style-button">Liste des Categories</a>
        </p>
        <p class="create-button">
            <button type="button" class="btn btn-secondary style-button" id="toggleFilterBtn">
                Afficher / Masquer les filtres
            </button>
        </p>
    </div>

<!-- Sidebar des filtres, cachée par défaut via le CSS -->
<div id="filter-sidebar">
    <h3>Filtres</h3>
    <!-- Formulaire GET vers Home/Index -->
    <form method="get" asp-action="Index" asp-controller="Home">
        <!-- Filtre par nom -->
        <div class="mb-3">
            <label for="searchName" class="form-label">Nom du jeu :</label>
            <input type="text" name="searchName" id="searchName" class="form-control" value="@Model.SearchName" />
        </div>
        <!-- Filtre par prix min / max -->
        <div class="mb-3">
            <label for="minPrice" class="form-label">Prix min :</label>
            <input type="number" step="0.01" name="minPrice" id="minPrice" class="form-control" value="@(Model.MinPrice?.ToString() ?? "")" />
        </div>
        <div class="mb-3">
            <label for="maxPrice" class="form-label">Prix max :</label>
            <input type="number" step="0.01" name="maxPrice" id="maxPrice" class="form-control" value="@(Model.MaxPrice?.ToString() ?? "")" />
        </div>
        <!-- Filtre par catégorie -->
        <div class="mb-3">
            <label class="form-label">Catégories :</label>
            <br />
            @{
                var allCategories = _context.Categories.OrderBy(c => c.Name).ToList();
                var selectedCatIds = Model.SelectedCategories ?? new List<int>();
            }
            @foreach (var cat in allCategories)
            {
                bool isChecked = selectedCatIds.Contains(cat.Id);
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="cat_@cat.Id" name="selectedCategories" value="@cat.Id" @(isChecked ? "checked" : "") />
                    <label class="form-check-label" for="cat_@cat.Id">@cat.Name</label>
                </div>
            }
        </div>
        <!-- Filtre par "Possédé ou non" (les users non connectés n'y ont pas accés') -->
        @if (isAuthenticated)
        {
            <div class="mb-3">
                <label class="form-label">Possédé ?</label>
                <select name="possessed" class="form-select">
                    <option value="" selected="@(Model.Possessed == null)">Indifférent</option>
                    <option value="true" selected="@(Model.Possessed == true)">Oui</option>
                    <option value="false" selected="@(Model.Possessed == false)">Non</option>
                </select>
            </div>
        }
        <!-- Filtre par taille min/max en Mo -->
        <div class="mb-3">
            <label for="minSize" class="form-label">Taille min (Mo) :</label>
            <input type="number" name="minSize" id="minSize" class="form-control" value="@(Model.MinSize?.ToString() ?? "")" />
        </div>
        <div class="mb-3">
            <label for="maxSize" class="form-label">Taille max (Mo) :</label>
            <input type="number" name="maxSize" id="maxSize" class="form-control" value="@(Model.MaxSize?.ToString() ?? "")" />
        </div>
        <!-- Boutons -->
        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">Appliquer</button>
            <a asp-controller="Home" asp-action="Index" class="btn btn-primary">Réinitialiser</a>
        </div>
    </form>
</div>



<div class="game-grid">
    @foreach (var game in Model.Games)
    {
        <div class="game-card">
            <div class="game-header">
                <span class="game-id">#@game.Id</span>
                <h2 class="game-name">@game.Name</h2>
            </div>
            <p class="game-description">@game.Description</p>
            <div class="price-container">
                <p>Price :</p>
                $@game.Price
            </div>
            <div class="category-container">
                @{
                    var categories = game.Categories.Where(c => c.Name != ")").ToList();
                }
                @foreach (var category in categories.Select((c, index) => new { c, index }))
                {
                    <span class="category">@category.c.Name</span>
                    @(category.index < categories.Count - 1 ? ", " : "")
                }
            </div>

            @if (isAuthenticated)
            {
                @* Si le jeu est déjà acheté, afficher un badge "Owned" *@
                @if (ownedGameIds.Contains(game.Id))
                {
                    <div class="owned-badge">
                        <i class="fas fa-check-circle"></i> Owned
                    </div>
                }
                else
                {
                    <form method="post" asp-action="BuyGame" asp-controller="Game" asp-route-id="@game.Id">
                        <button type="submit" class="btn btn-success style-button">Buy</button>
                    </form>
                }
            }

            @if (isAdmin)
            {
                <div class="game-bottom">
                    <div class="edit-button-container">
                        <a asp-controller="EditGame" asp-action="EditGame" asp-route-id="@game.Id" class="btn btn-primary style-button">
                            <i class="fas fa-edit"></i>
                        </a>
                    </div>
                    <div class="delete-button-container">
                        <button class="btn btn-danger style-button" data-bs-toggle="modal" data-bs-target="#deleteModal" data-id="@game.Id">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this game?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    const deleteButtons = document.querySelectorAll('.delete-button-container button');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function () {
            const gameId = this.getAttribute('data-id');
            const form = document.getElementById('deleteForm');
            form.action = '@Url.Action("Delete", "Home")/' + gameId;
        });
    });

    const toggleFilterBtn = document.getElementById('toggleFilterBtn');
    const filterSidebar = document.getElementById('filter-sidebar');

    toggleFilterBtn.addEventListener('click', () => {
        filterSidebar.classList.toggle('open');
    });

        document.addEventListener('DOMContentLoaded', () => {
        const header = document.querySelector('header');
        if (header && filterSidebar) {
            const headerHeight = header.offsetHeight;
            const extraOffset = headerHeight / 3.5;
            const totalOffset = headerHeight + extraOffset;
            filterSidebar.style.top = totalOffset + 'px';
            filterSidebar.style.height = `calc(100% - ${totalOffset}px)`;
        }
    });
</script>
